import asyncio
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv
from pytz import timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from database import init_db, save_user, load_user, delete_user

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ú–°–ö —Ç–∞–π–º–∑–æ–Ω–∞
MSK = timezone("Europe/Moscow")

# –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π (–ø–æ –ú–°–ö)
RAW_OPTIONS = [
    ("–í—ã–ª–µ—Ç: 3 –∞–ø—Ä–µ–ª—è, 09:10", datetime(2025, 4, 3, 9, 10, tzinfo=MSK)),
    ("–ü—Ä–∏–ª—ë—Ç: 3 –∞–ø—Ä–µ–ª—è, 10:50", datetime(2025, 4, 3, 10, 50, tzinfo=MSK)),
    ("–û—Ç–µ–ª—å: 3 –∞–ø—Ä–µ–ª—è, 17:30", datetime(2025, 4, 3, 17, 30, tzinfo=MSK)),
    ("–ò–ª—å—è –ö–æ–π—Ç–æ–≤ –Ω–∞ –ø–æ–ª—É: 3 –∞–ø—Ä–µ–ª—è, 22:30", datetime(2025, 4, 3, 22, 30, tzinfo=MSK))
]

# –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö callback_data
OPTIONS = {f"opt{i+1}": (label, dt) for i, (label, dt) in enumerate(RAW_OPTIONS)}

user_deadlines = {}  # user_id: deadline
user_tasks = {}  # user_id: asyncio.Task

# === –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ===
STATE_IDLE = "idle"
STATE_SELECTING = "selecting_time"
STATE_COUNTDOWN = "countdown_started"

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    context.user_data.clear()

    loaded = load_user(user_id)
    if loaded:
        deadline, state = loaded
        user_deadlines[user_id] = deadline
        context.user_data["state"] = state

        if state == STATE_COUNTDOWN:
            await update.message.reply_text(
                f"–í—ã —É–∂–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –æ—Ç—Å—á—ë—Ç –¥–æ: {deadline.astimezone(MSK).strftime('%d.%m %H:%M')} (–ú–°–ö)\n"
                f"–û—Ç–ø—Ä–∞–≤–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å.",
                reply_markup=build_menu()
            )
            app = context.application
            task = asyncio.create_task(start_countdown(app, user_id, deadline))
            user_tasks[user_id] = task
            return

    context.user_data["state"] = STATE_SELECTING
    await update.message.reply_text("–°–∫–æ—Ä–æ –ö–∞–∑–∞–Ω—å!!\n–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è:", reply_markup=build_menu())


def build_menu():
    keyboard = [[InlineKeyboardButton(text=label, callback_data=key)] for key, (label, _) in OPTIONS.items()]
    keyboard.append([
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"),
        InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="change")
    ])
    return InlineKeyboardMarkup(keyboard)


def pluralize_hours(n):
    if 11 <= n % 100 <= 14:
        return "—á–∞—Å–æ–≤"
    elif n % 10 == 1:
        return "—á–∞—Å"
    elif 2 <= n % 10 <= 4:
        return "—á–∞—Å–∞"
    else:
        return "—á–∞—Å–æ–≤"

def verb_hours(n):
    return "–æ—Å—Ç–∞–ª—Å—è" if n % 10 == 1 and not 11 <= n % 100 <= 14 else "–æ—Å—Ç–∞–ª–æ—Å—å"


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    selected = query.data

    if selected == "cancel":
        await cancel_countdown(user_id, context)
        context.user_data["state"] = STATE_IDLE
        delete_user(user_id)
        await query.edit_message_text("–û—Ç—Å—á–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—à–∏ /start")
        return

    if selected == "change":
        await cancel_countdown(user_id, context)
        context.user_data["state"] = STATE_SELECTING
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è:", reply_markup=build_menu())
        return

    selected_time_data = OPTIONS.get(selected)
    if not selected_time_data:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏.")
        return

    label, selected_time = selected_time_data
    user_deadlines[user_id] = selected_time
    context.user_data["state"] = STATE_COUNTDOWN
    save_user(user_id, selected_time, STATE_COUNTDOWN)

    await query.edit_message_text(text=f"–û—Ç–ª–∏—á–Ω–æ! –û—Ç—Å—á–µ—Ç –¥–æ: {label}")

    app = context.application
    task = asyncio.create_task(start_countdown(app, user_id, selected_time))
    user_tasks[user_id] = task


# === –û—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ ===
async def start_countdown(app: Application, user_id: int, deadline: datetime):
    while True:
        now = datetime.now(MSK)
        if now >= deadline:
            await app.bot.send_message(chat_id=user_id, text="–£—Ä–∞, –ö–∞–∑–∞–Ω—å!!!!")
            user_deadlines.pop(user_id, None)
            user_tasks.pop(user_id, None)
            delete_user(user_id)
            break
        else:
            hours_left = int((deadline - now).total_seconds() // 3600)
            word = pluralize_hours(hours_left)
            verb = verb_hours(hours_left)
            await app.bot.send_message(chat_id=user_id, text=f"{verb.capitalize()} {hours_left} {word}!!")
            await asyncio.sleep(3600)


# === –û—Ç–º–µ–Ω–∞ –æ—Ç—Å—á–µ—Ç–∞ ===
async def cancel_countdown(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    task = user_tasks.pop(user_id, None)
    if task:
        task.cancel()
    user_deadlines.pop(user_id, None)


# === –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    init_db()
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()


if __name__ == "__main__":
    main()